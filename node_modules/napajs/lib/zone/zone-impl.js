"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var zone = require("./zone");
var transport = require("../transport");
var v8 = require("../v8");
var Result = /** @class */ (function () {
    function Result(payload, transportContext) {
        this._payload = payload;
        this._transportContext = transportContext;
    }
    Object.defineProperty(Result.prototype, "value", {
        get: function () {
            if (this._value == null) {
                this._value = transport.unmarshall(this._payload, this._transportContext);
            }
            return this._value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "payload", {
        get: function () {
            return this._payload;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Result.prototype, "transportContext", {
        get: function () {
            return this._transportContext;
        },
        enumerable: true,
        configurable: true
    });
    return Result;
}());
;
/// <summary> Helper function to workaround possible delay in Promise resolve/reject when working with Node event loop.
/// See https://github.com/audreyt/node-webworker-threads/issues/123#issuecomment-254019552
/// </summary>
function runImmediately(func) {
    if (typeof __in_napa === 'undefined') {
        // In node.
        setImmediate(func);
    }
    else {
        // In napa workers.
        func();
    }
}
/// <summary> Zone consists of Napa isolates. </summary>
var ZoneImpl = /** @class */ (function () {
    function ZoneImpl(nativeZone) {
        this._nativeZone = nativeZone;
    }
    Object.defineProperty(ZoneImpl.prototype, "id", {
        get: function () {
            return this._nativeZone.getId();
        },
        enumerable: true,
        configurable: true
    });
    ZoneImpl.prototype.toJSON = function () {
        return { id: this.id, type: this.id === 'node' ? 'node' : 'napa' };
    };
    ZoneImpl.prototype.broadcast = function (arg1, arg2) {
        var _this = this;
        var spec = this.createBroadcastRequest(arg1, arg2);
        return new Promise(function (resolve, reject) {
            _this._nativeZone.broadcast(spec, function (result) {
                runImmediately(function () {
                    if (result.code === 0) {
                        resolve();
                    }
                    else {
                        reject(result.errorMessage);
                    }
                });
            });
        });
    };
    ZoneImpl.prototype.broadcastSync = function (arg1, arg2) {
        var spec = this.createBroadcastRequest(arg1, arg2);
        var result = this._nativeZone.broadcastSync(spec);
        if (result.code !== 0) {
            throw new Error(result.errorMessage);
        }
    };
    ZoneImpl.prototype.execute = function (arg1, arg2, arg3, arg4) {
        var _this = this;
        var spec = this.createExecuteRequest(arg1, arg2, arg3, arg4);
        return new Promise(function (resolve, reject) {
            _this._nativeZone.execute(spec, function (result) {
                runImmediately(function () {
                    if (result.code === 0) {
                        resolve(new Result(result.returnValue, transport.createTransportContext(true, result.contextHandle)));
                    }
                    else {
                        reject(result.errorMessage);
                    }
                });
            });
        });
    };
    ZoneImpl.prototype.createBroadcastRequest = function (arg1, arg2) {
        if (typeof arg1 === "function") {
            // broadcast with function
            if (arg1.origin == null) {
                // We get caller stack at index 2.
                // <caller> -> broadcast -> createBroadcastRequest
                //   2           1               0
                arg1.origin = v8.currentStack(3)[2].getFileName();
            }
            return {
                module: "__function",
                function: transport.saveFunction(arg1),
                arguments: (arg2 == null
                    ? []
                    : arg2.map(function (arg) { return transport.marshall(arg, null); })),
                options: zone.DEFAULT_CALL_OPTIONS,
                transportContext: null
            };
        }
        else {
            // broadcast with source
            return {
                module: "",
                function: "eval",
                arguments: [JSON.stringify(arg1)],
                options: zone.DEFAULT_CALL_OPTIONS,
                transportContext: null
            };
        }
    };
    ZoneImpl.prototype.createExecuteRequest = function (arg1, arg2, arg3, arg4) {
        var moduleName = null;
        var functionName = null;
        var args = null;
        var options = undefined;
        if (typeof arg1 === 'function') {
            moduleName = "__function";
            if (arg1.origin == null) {
                // We get caller stack at index 2.
                // <caller> -> execute -> createExecuteRequest
                //   2           1               0
                arg1.origin = v8.currentStack(3)[2].getFileName();
            }
            functionName = transport.saveFunction(arg1);
            args = arg2;
            options = arg3;
        }
        else {
            moduleName = arg1;
            // If module name is relative path, try to deduce from call site.
            if (moduleName != null
                && moduleName.length != 0
                && !path.isAbsolute(moduleName)) {
                moduleName = path.resolve(path.dirname(v8.currentStack(3)[2].getFileName()), moduleName);
            }
            functionName = arg2;
            args = arg3;
            options = arg4;
        }
        if (args == null) {
            args = [];
        }
        // Create a non-owning transport context which will be passed to execute call.
        var transportContext = transport.createTransportContext(false);
        return {
            module: moduleName,
            function: functionName,
            arguments: args.map(function (arg) { return transport.marshall(arg, transportContext); }),
            options: options != null ? options : zone.DEFAULT_CALL_OPTIONS,
            transportContext: transportContext
        };
    };
    return ZoneImpl;
}());
exports.ZoneImpl = ZoneImpl;
