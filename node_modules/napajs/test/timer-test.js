"use strict";
// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var napa = require("../lib/index");
var timers_1 = require("timers");
// To be execute in napa workers
function setImmediateTest(taskGroupId) {
    var kTaskGroupSize = 4;
    var kAllowedScheduleDiffInMS = 200;
    var correctResult = "";
    var lastTaskId = 0;
    for (var taskId = 0; taskId < kTaskGroupSize; taskId++) {
        if (taskId != 1) {
            correctResult = correctResult + ":" + taskId + "_OnTime";
            lastTaskId = taskId;
        }
    }
    var promise = new Promise(function (resolve, reject) {
        var execResult = "";
        var _loop_1 = function (taskId) {
            var startTime = Date.now();
            var immedidate = timers_1.setImmediate(function (lastTaskId) {
                var delayToRun = Date.now() - startTime;
                execResult = execResult + ":" + taskId + "_OnTime";
                if (delayToRun > kAllowedScheduleDiffInMS) {
                    execResult = execResult + "(X)";
                }
                if (taskId == lastTaskId) {
                    if (execResult == correctResult) {
                        resolve("OK:" + execResult);
                    }
                    else {
                        reject("FAIL:" + execResult + " vs " + correctResult);
                    }
                }
            }, lastTaskId);
            if (taskId == 1) {
                timers_1.clearImmediate(immedidate);
            }
        };
        for (var taskId = 0; taskId < kTaskGroupSize; taskId++) {
            _loop_1(taskId);
        }
    });
    return promise;
}
exports.setImmediateTest = setImmediateTest;
function setTimeoutTest(taskGroupId) {
    var kTaskGroupSize = 4;
    var kAllowedScheduleDiffInMS = 200;
    timers_1.setTimeout(function () { }, 10); // Just a warm up.
    var correctResult = "";
    var lastTaskId = 0;
    for (var taskId = 0; taskId < kTaskGroupSize; taskId++) {
        if (taskId != 1) {
            correctResult = correctResult + ":" + taskId + "_OnTime";
            lastTaskId = taskId;
        }
    }
    var promise = new Promise(function (resolve, reject) {
        var execResult = "";
        var _loop_2 = function (taskId) {
            var wait = 300 * (taskGroupId * kTaskGroupSize + taskId + 1);
            var startTime = Date.now();
            var timeout = timers_1.setTimeout(function (lastTaskId) {
                var waitToRun = Date.now() - startTime;
                execResult = execResult + ":" + taskId + "_OnTime";
                if (Math.abs(waitToRun - wait) > kAllowedScheduleDiffInMS) {
                    execResult = execResult + "(X)";
                }
                if (taskId == lastTaskId) {
                    if (execResult == correctResult) {
                        resolve("OK:" + execResult);
                    }
                    else {
                        reject("FAIL:" + execResult + " .vs. " + correctResult);
                    }
                }
            }, wait, lastTaskId);
            if (taskId == 1) {
                timers_1.clearTimeout(timeout);
            }
        };
        for (var taskId = 0; taskId < kTaskGroupSize; taskId++) {
            _loop_2(taskId);
        }
    });
    return promise;
}
exports.setTimeoutTest = setTimeoutTest;
function setIntervalTest(taskGroupId, duration, count) {
    var kAllowedScheduleDiffInMS = 200;
    var correctResult = "";
    for (var i = 0; i < count; ++i) {
        correctResult += ":" + i + "_OnTime";
    }
    var repeatCount = 0;
    var execResult = "";
    var startTime = Date.now();
    var interval = timers_1.setInterval(function () {
        var wait = Date.now() - startTime;
        execResult += ":" + repeatCount + "_OnTime";
        ++repeatCount;
        var avgScheduleDiff = Math.abs(wait - repeatCount * duration) / repeatCount;
        if (avgScheduleDiff > kAllowedScheduleDiffInMS) {
            execResult += "(X)";
        }
    }, duration);
    var promise = new Promise(function (resolve, reject) {
        timers_1.setTimeout(function () {
            if (execResult == correctResult) {
                resolve("OK:" + execResult);
            }
            else {
                reject("FAIL:" + execResult + " .vs. " + correctResult);
            }
        }, duration * (count + 2.6));
    });
    timers_1.setTimeout(function () {
        timers_1.clearInterval(interval);
    }, Math.ceil(duration * (count + 0.8)));
    return promise;
}
exports.setIntervalTest = setIntervalTest;
if (typeof __in_napa === 'undefined') {
    var assert_1 = require('assert');
    var NUMBER_OF_WORKERS = 3;
    var kTaskGroupCount_1 = 3;
    var zone_1 = napa.zone.create('zone', { workers: NUMBER_OF_WORKERS });
    describe("napajs/timers", function () {
        describe("setImmediate/clearImmediate", function () {
            var promises = [];
            for (var groupId = 0; groupId < kTaskGroupCount_1; groupId++) {
                var res = zone_1.execute('./timer-test', 'setImmediateTest', [groupId]);
                promises.push(res);
            }
            var _loop_3 = function (groupId) {
                it("Immediate test group:" + groupId + " should return string prefixed with OK", function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, promises[groupId]];
                                case 1:
                                    result = (_a.sent()).value;
                                    assert_1(result.startsWith('OK'), "" + result);
                                    return [2 /*return*/];
                            }
                        });
                    });
                });
            };
            for (var groupId = 0; groupId < kTaskGroupCount_1; groupId++) {
                _loop_3(groupId);
            }
        });
        describe("setTimeout/clearTimeout", function () {
            var promises = [];
            for (var groupId = 0; groupId < kTaskGroupCount_1; groupId++) {
                var res = zone_1.execute('./timer-test', 'setTimeoutTest', [groupId]);
                promises.push(res);
            }
            var _loop_4 = function (groupId) {
                it("Timeout test group:" + groupId + " should return string prefixed with OK", function () {
                    return __awaiter(this, void 0, void 0, function () {
                        var result;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, promises[groupId]];
                                case 1:
                                    result = (_a.sent()).value;
                                    assert_1(result.startsWith('OK'), "" + result);
                                    return [2 /*return*/];
                            }
                        });
                    });
                }).timeout(3000);
                ;
            };
            for (var groupId = 0; groupId < kTaskGroupCount_1; groupId++) {
                _loop_4(groupId);
            }
        });
        describe("setInterval/clearInterval", function () {
            it("Interval test should return string prefixed with OK", function () {
                return __awaiter(this, void 0, void 0, function () {
                    var promise, result;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                promise = zone_1.execute('./timer-test', 'setIntervalTest', ["0", 500, 4]);
                                return [4 /*yield*/, promise];
                            case 1:
                                result = (_a.sent()).value;
                                assert_1(result.startsWith('OK'), "" + result);
                                return [2 /*return*/];
                        }
                    });
                });
            }).timeout(6000);
        });
    });
}
